class Node {
  int data;
  Node? next;

  Node(this.data);
}

class LinkedList {
  Node? head;

  void addNode(int data) {
    Node newNode = Node(data);
    if (head == null) {
      head = newNode;
    } else {
      Node? current = head;
      while (current!.next != null) {
        current = current.next;
      }
      current.next = newNode;
    }
  }

  void printList() {
    Node? current = head;
    while (current != null) {
      print(current.data);
      current = current.next;
    }
  }

  void removeAllOccurrences(int target) {
    // Handle cases where the target is at the beginning of the list
    while (head != null && head!.data == target) {
      head = head!.next;
    }

    Node? current = head;
    Node? prev;

    while (current != null) {
      if (current.data == target) {
        // Skip the current node if its data matches the target
        prev!.next = current.next;
      } else {
        // Move to the next node if no removal is needed
        prev = current;
      }
      current = current.next;
    }
  }
}

void main() {
  LinkedList linkedList = LinkedList();

  linkedList.addNode(1);
  linkedList.addNode(2);
  linkedList.addNode(3);
  linkedList.addNode(2);
  linkedList.addNode(4);
  linkedList.addNode(5);

  print("Original List:");
  linkedList.printList();

  print("\nAfter Removing All Occurrences of 2:");
  linkedList.removeAllOccurrences(2);
  linkedList.printList();
}
