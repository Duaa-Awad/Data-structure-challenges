class Node {
  int data;
  Node? next;

  Node(this.data);
}

class LinkedList {
  Node? head;

  void addNode(int data) {
    Node newNode = Node(data);
    if (head == null) {
      head = newNode;
    } else {
      Node? current = head;
      while (current!.next != null) {
        current = current.next;
      }
      current.next = newNode;
    }
  }

  void printList() {
    Node? current = head;
    while (current != null) {
      print(current.data);
      current = current.next;
    }
  }

  void printReverse() {
    _printReverseHelper(head);
  }

  void _printReverseHelper(Node? node) {
    if (node == null) {
      return;
    }
    _printReverseHelper(node.next);
    print(node.data);
  }

  Node? findMiddleNode() {
    Node? slowPointer = head;
    Node? fastPointer = head;

    while (fastPointer != null && fastPointer.next != null) {
      slowPointer = slowPointer!.next;
      fastPointer = fastPointer.next!.next;
    }

    return slowPointer;
  }
}

void main() {
  LinkedList linkedList = LinkedList();

  linkedList.addNode(1);
  linkedList.addNode(2);
  linkedList.addNode(3);
  linkedList.addNode(4);
  linkedList.addNode(5);

  print("Original List:");
  linkedList.printList();

  print("\nList in Reverse Order:");
  linkedList.printReverse();

  Node? middleNode = linkedList.findMiddleNode();
  print("\nMiddle Node: ${middleNode?.data}");
}
